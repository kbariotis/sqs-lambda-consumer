service: sqs-lambda-consumer

provider:
  name: aws
  runtime: nodejs8.10
  profile: ${opt:stage}
  stage: ${opt:stage}
  region: eu-west-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: "*"
    - Effect: Allow
      Action:
        - sqs:SendMessageBatch
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
      Resource:
        - { "Fn::GetAtt": [ "ExampleQueue", "Arn" ] }

functions:
  # Helper function to feed the queue for demonstration
  # purposes
  feed:
    handler: src/handlers/feed.handler
    environment:
      EXAMPLE_QUEUE_URL:
        Ref: ExampleQueue
  # The main Queue worker
  queueHandler:
    handler: src/handlers/queueHandler.handler
    # For the sake of this example, limit to 1 concurrent functions
    reservedConcurrency: 1
    environment:
      EXAMPLE_QUEUE_URL:
        Ref: ExampleQueue
    # This function will wake it self every minute
    # to check for messages. If it wakes up and another
    # instance is running it will be throttled since we
    # have limit concurrency so only one worker will be
    # working at all times
    events:
      - schedule: rate(1 minute)

resources:
  Resources:

    # Example queue
    # Manualy fed by the Feed function
    ExampleQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ExampleQueue
        RedrivePolicy:
          deadLetterTargetArn: { "Fn::GetAtt": [ "ExampleDLQueue", "Arn" ] }
          maxReceiveCount: 3
    ExampleDLQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ExampleDLQueue

  Outputs:
